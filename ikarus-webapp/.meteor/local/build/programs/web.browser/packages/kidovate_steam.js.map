)]}'
{"version":3,"file":"/packages/kidovate:steam.js","sources":["kidovate:steam/steam_configure.html","kidovate:steam/steam_configure.js","kidovate:steam/steam_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,4D;AACA,4H;AACA,kB;AACA,gV;AACA,kB;AACA,4B;AACA,sD;AACA,iK;AACA,I;;;;;;;;;;;;;;;;;;;ACTA,oE;AACA,8B;AACA,E;;AAEA,mE;AACA,U;AACA,oD;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;;ACRA,W;;AAEA,yC;AACA,4B;AACA,mF;AACA,4E;AACA,W;AACA,iF;AACA,qD;AACA,4E;AACA,gD;AACA,iB;AACA,wB;AACA,iB;AACA,G;;AAEA,+E;AACA,gB;AACA,2I;AACA,W;AACA,G;;AAEA,oC;;AAEA,gB;AACA,mD;AACA,uD;AACA,sC;AACA,2F;AACA,8F;AACA,iD;AACA,+E;AACA,iF;AACA,oC;;AAEA,sC;AACA,+B;AACA,wD;AACA,mD;AACA,E","sourcesContent":["\nTemplate.__checkName(\"configureLoginServiceDialogForSteam\");\nTemplate[\"configureLoginServiceDialogForSteam\"] = new Template(\"Template.configureLoginServiceDialogForSteam\", (function() {\n  var view = this;\n  return [ HTML.Raw(\"<p>\\n    First, you'll need to get a Steam Web API Key. Follow these steps:\\n  </p>\\n  \"), HTML.OL(\"\\n    \", HTML.Raw('<li>\\n      Visit <a href=\"http://steamcommunity.com/dev/apikey\" target=\"blank\">http://steamcommunity.com/dev/apikey</a>\\n    </li>'), \"\\n    \", HTML.LI(\"\\n      Set Domain Name to: \", HTML.SPAN({\n    \"class\": \"url\"\n  }, Blaze.View(function() {\n    return Spacebars.mustache(view.lookup(\"siteUrl\"));\n  })), \"\\n    \"), \"\\n    \", HTML.Raw(\"<li>\\n      Accept the Terms of Use\\n    </li>\"), \"\\n    \", HTML.Raw('<li>\\n      Click \"Register\"\\n    </li>'), \"\\n  \") ];\n}));\n","Template.configureLoginServiceDialogForSteam.siteUrl = function () {\n  return Meteor.absoluteUrl();\n};\n\nTemplate.configureLoginServiceDialogForSteam.fields = function () {\n  return [\n    {property: 'apiKey', label: 'Steam Web API Key'}\n  ];\n};\n","Steam = {};\n\n// Request Steam credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nSteam.requestCredential = function (options, credentialRequestCompleteCallback) {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  } else if (!options) {\n    options = {};\n  }\n\n  var config = ServiceConfiguration.configurations.findOne({service: 'steam'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError(\"Service not configured\"));\n    return;\n  }\n\n  var credentialToken = Random.id();\n\n  var loginUrl =\n        'https://steamcommunity.com/openid/login' +\n        '?openid.ns=http://specs.openid.net/auth/2.0' +\n        '&openid.mode=checkid_setup' +\n        // As I couldn't find a better place to stick in the '&state=' I simply put it here\n        '&openid.return_to=' + Meteor.absoluteUrl('_oauth/steam?close%26' + credentialToken) +\n        '&openid.realm=' + Meteor.absoluteUrl() +\n        '&openid.identity=http://specs.openid.net/auth/2.0/identifier_select' +\n        '&openid.claimed_id=http://specs.openid.net/auth/2.0/identifier_select' +\n        '&state=' + credentialToken;\n\n  Oauth.initiateLogin(credentialToken,\n                      loginUrl,\n                      credentialRequestCompleteCallback,\n                      { width: 960, height: 640 });\n};\n"]}