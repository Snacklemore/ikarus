{"version":3,"file":"/packages/kidovate:steam.js","sources":["kidovate:steam/steam_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,W;;AAEA,yD;AACA,qB;AACA,mE;AACA,kC;AACA,sC;;AAEA,U;AACA,kB;AACA,2B;AACA,qC;AACA,e;AACA,8B;AACA,qC;AACA,gC;AACA,O;AACA,M;AACA,sD;AACA,I;AACA,G;;AAEA,mC;AACA,+E;AACA,c;AACA,yE;;AAEA,e;AACA,O;AACA,4I;AACA,iB;AACA,2H;AACA,G;;AAEA,6E;AACA,0C;AACA,wD;AACA,U;AACA,6F;AACA,G;AACA,E;;AAEA,sC;AACA,+E;AACA,c;AACA,yE;;AAEA,e;AACA,O;AACA,6F;AACA,e;AACA,0B;AACA,wB;AACA,O;AACA,O;;AAEA,8B;AACA,mD;AACA,iB;AACA,iH;AACA,G;AACA,E;;;AAGA,sD;AACA,mD;AACA,E;AACA,gC","sourcesContent":["Steam = {};\n\nOauth.registerService('steam', 2, null, function(query) {\n  // XX fix the state\n  query.state = _.last(query['openid.return_to'].split('?close&'));\n  var steamId = getSteamId(query);\n  var identity = getIdentity(steamId);\n\n  return {\n    serviceData: {\n      id: identity.steamid,\n      username: identity.personaname,\n      avatar: {\n      \tsmall: identity.avatar,\n      \tmedium: identity.avatarmedium,\n      \tfull: identity.avatarfull\n      }\n    },\n    options: {profile: { name: identity.personaname }}\n  };\n});\n\nvar getSteamId = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'steam'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError(\"Service not configured\");\n\n  var response;\n  try {\n    response = HTTP.post(\"https://steamcommunity.com/openid/login\", { params: _.extend(query, { 'openid.mode': 'check_authentication' }) });\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Steam. \" + err.message), { response: err.response });\n  }\n\n  if (response.content && response.content.indexOf(\"is_valid:true\") !== -1) {\n  \t// Grab the SteamID from the claimed_id\n  \treturn _.last(query['openid.claimed_id'].split('/'));\n  } else {\n    throw new Error(\"Failed to complete OAuth handshake with Steam. \" + response.data.error);\n  }\n};\n\nvar getIdentity = function (steamId) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'steam'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError(\"Service not configured\");\n\n  var response;\n  try {\n    response = HTTP.get(\"http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/\", {\n      params: {\n      \tkey: config.apiKey,\n      \tsteamids: steamId\n      }\n    });\n\n    // Return the first player\n    return _.first(response.data.response.players);\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to fetch identity from Steam. \" + err.message), { response: err.response });\n  }\n};\n\n\nSteam.retrieveCredential = function(credentialToken) {\n  return Oauth.retrieveCredential(credentialToken);\n};\nSteam.getIdentity = getIdentity;\n"]}